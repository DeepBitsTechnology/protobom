// Code generated by counterfeiter. DO NOT EDIT.
package writerfakes

import (
	"io"
	"sync"

	"github.com/bom-squad/protobom/pkg/formats"
	"github.com/bom-squad/protobom/pkg/native"
	"github.com/bom-squad/protobom/pkg/sbom"
	"github.com/bom-squad/protobom/pkg/writer/options"
)

type FakeWriterImplementation struct {
	GetFormatSerializerStub        func(formats.Format) (native.Serializer, error)
	getFormatSerializerMutex       sync.RWMutex
	getFormatSerializerArgsForCall []struct {
		arg1 formats.Format
	}
	getFormatSerializerReturns struct {
		result1 native.Serializer
		result2 error
	}
	getFormatSerializerReturnsOnCall map[int]struct {
		result1 native.Serializer
		result2 error
	}
	OpenFileStub        func(string) (io.WriteCloser, error)
	openFileMutex       sync.RWMutex
	openFileArgsForCall []struct {
		arg1 string
	}
	openFileReturns struct {
		result1 io.WriteCloser
		result2 error
	}
	openFileReturnsOnCall map[int]struct {
		result1 io.WriteCloser
		result2 error
	}
	SerializeSBOMStub        func(options.Options, native.Serializer, *sbom.Document, io.WriteCloser) error
	serializeSBOMMutex       sync.RWMutex
	serializeSBOMArgsForCall []struct {
		arg1 options.Options
		arg2 native.Serializer
		arg3 *sbom.Document
		arg4 io.WriteCloser
	}
	serializeSBOMReturns struct {
		result1 error
	}
	serializeSBOMReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWriterImplementation) GetFormatSerializer(arg1 formats.Format) (native.Serializer, error) {
	fake.getFormatSerializerMutex.Lock()
	ret, specificReturn := fake.getFormatSerializerReturnsOnCall[len(fake.getFormatSerializerArgsForCall)]
	fake.getFormatSerializerArgsForCall = append(fake.getFormatSerializerArgsForCall, struct {
		arg1 formats.Format
	}{arg1})
	stub := fake.GetFormatSerializerStub
	fakeReturns := fake.getFormatSerializerReturns
	fake.recordInvocation("GetFormatSerializer", []interface{}{arg1})
	fake.getFormatSerializerMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWriterImplementation) GetFormatSerializerCallCount() int {
	fake.getFormatSerializerMutex.RLock()
	defer fake.getFormatSerializerMutex.RUnlock()
	return len(fake.getFormatSerializerArgsForCall)
}

func (fake *FakeWriterImplementation) GetFormatSerializerCalls(stub func(formats.Format) (native.Serializer, error)) {
	fake.getFormatSerializerMutex.Lock()
	defer fake.getFormatSerializerMutex.Unlock()
	fake.GetFormatSerializerStub = stub
}

func (fake *FakeWriterImplementation) GetFormatSerializerArgsForCall(i int) formats.Format {
	fake.getFormatSerializerMutex.RLock()
	defer fake.getFormatSerializerMutex.RUnlock()
	argsForCall := fake.getFormatSerializerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWriterImplementation) GetFormatSerializerReturns(result1 native.Serializer, result2 error) {
	fake.getFormatSerializerMutex.Lock()
	defer fake.getFormatSerializerMutex.Unlock()
	fake.GetFormatSerializerStub = nil
	fake.getFormatSerializerReturns = struct {
		result1 native.Serializer
		result2 error
	}{result1, result2}
}

func (fake *FakeWriterImplementation) GetFormatSerializerReturnsOnCall(i int, result1 native.Serializer, result2 error) {
	fake.getFormatSerializerMutex.Lock()
	defer fake.getFormatSerializerMutex.Unlock()
	fake.GetFormatSerializerStub = nil
	if fake.getFormatSerializerReturnsOnCall == nil {
		fake.getFormatSerializerReturnsOnCall = make(map[int]struct {
			result1 native.Serializer
			result2 error
		})
	}
	fake.getFormatSerializerReturnsOnCall[i] = struct {
		result1 native.Serializer
		result2 error
	}{result1, result2}
}

func (fake *FakeWriterImplementation) OpenFile(arg1 string) (io.WriteCloser, error) {
	fake.openFileMutex.Lock()
	ret, specificReturn := fake.openFileReturnsOnCall[len(fake.openFileArgsForCall)]
	fake.openFileArgsForCall = append(fake.openFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.OpenFileStub
	fakeReturns := fake.openFileReturns
	fake.recordInvocation("OpenFile", []interface{}{arg1})
	fake.openFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWriterImplementation) OpenFileCallCount() int {
	fake.openFileMutex.RLock()
	defer fake.openFileMutex.RUnlock()
	return len(fake.openFileArgsForCall)
}

func (fake *FakeWriterImplementation) OpenFileCalls(stub func(string) (io.WriteCloser, error)) {
	fake.openFileMutex.Lock()
	defer fake.openFileMutex.Unlock()
	fake.OpenFileStub = stub
}

func (fake *FakeWriterImplementation) OpenFileArgsForCall(i int) string {
	fake.openFileMutex.RLock()
	defer fake.openFileMutex.RUnlock()
	argsForCall := fake.openFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWriterImplementation) OpenFileReturns(result1 io.WriteCloser, result2 error) {
	fake.openFileMutex.Lock()
	defer fake.openFileMutex.Unlock()
	fake.OpenFileStub = nil
	fake.openFileReturns = struct {
		result1 io.WriteCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeWriterImplementation) OpenFileReturnsOnCall(i int, result1 io.WriteCloser, result2 error) {
	fake.openFileMutex.Lock()
	defer fake.openFileMutex.Unlock()
	fake.OpenFileStub = nil
	if fake.openFileReturnsOnCall == nil {
		fake.openFileReturnsOnCall = make(map[int]struct {
			result1 io.WriteCloser
			result2 error
		})
	}
	fake.openFileReturnsOnCall[i] = struct {
		result1 io.WriteCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeWriterImplementation) SerializeSBOM(arg1 options.Options, arg2 native.Serializer, arg3 *sbom.Document, arg4 io.WriteCloser) error {
	fake.serializeSBOMMutex.Lock()
	ret, specificReturn := fake.serializeSBOMReturnsOnCall[len(fake.serializeSBOMArgsForCall)]
	fake.serializeSBOMArgsForCall = append(fake.serializeSBOMArgsForCall, struct {
		arg1 options.Options
		arg2 native.Serializer
		arg3 *sbom.Document
		arg4 io.WriteCloser
	}{arg1, arg2, arg3, arg4})
	stub := fake.SerializeSBOMStub
	fakeReturns := fake.serializeSBOMReturns
	fake.recordInvocation("SerializeSBOM", []interface{}{arg1, arg2, arg3, arg4})
	fake.serializeSBOMMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeWriterImplementation) SerializeSBOMCallCount() int {
	fake.serializeSBOMMutex.RLock()
	defer fake.serializeSBOMMutex.RUnlock()
	return len(fake.serializeSBOMArgsForCall)
}

func (fake *FakeWriterImplementation) SerializeSBOMCalls(stub func(options.Options, native.Serializer, *sbom.Document, io.WriteCloser) error) {
	fake.serializeSBOMMutex.Lock()
	defer fake.serializeSBOMMutex.Unlock()
	fake.SerializeSBOMStub = stub
}

func (fake *FakeWriterImplementation) SerializeSBOMArgsForCall(i int) (options.Options, native.Serializer, *sbom.Document, io.WriteCloser) {
	fake.serializeSBOMMutex.RLock()
	defer fake.serializeSBOMMutex.RUnlock()
	argsForCall := fake.serializeSBOMArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeWriterImplementation) SerializeSBOMReturns(result1 error) {
	fake.serializeSBOMMutex.Lock()
	defer fake.serializeSBOMMutex.Unlock()
	fake.SerializeSBOMStub = nil
	fake.serializeSBOMReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWriterImplementation) SerializeSBOMReturnsOnCall(i int, result1 error) {
	fake.serializeSBOMMutex.Lock()
	defer fake.serializeSBOMMutex.Unlock()
	fake.SerializeSBOMStub = nil
	if fake.serializeSBOMReturnsOnCall == nil {
		fake.serializeSBOMReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.serializeSBOMReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeWriterImplementation) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFormatSerializerMutex.RLock()
	defer fake.getFormatSerializerMutex.RUnlock()
	fake.openFileMutex.RLock()
	defer fake.openFileMutex.RUnlock()
	fake.serializeSBOMMutex.RLock()
	defer fake.serializeSBOMMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWriterImplementation) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
